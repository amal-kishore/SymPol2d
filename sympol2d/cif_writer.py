"""
CIF writer module for generating bilayer structures
"""

import numpy as np
from typing import List, Dict, Optional
from pathlib import Path
from datetime import datetime
from .c2db_interface import Material2D
from .scanner import StackingConfiguration


def generate_bilayer_cif(material: Material2D, stacking: StackingConfiguration, 
                        stacking_name: str = "bilayer") -> str:
    """
    Generate CIF content for a bilayer structure.
    
    Args:
        material: Material2D object with monolayer structure
        stacking: StackingConfiguration with stacking vector and interlayer distance
        stacking_name: Name for the structure (e.g., 'AA', 'AB', 'BA')
        
    Returns:
        CIF format string
    """
    # Get monolayer structure
    lattice = material.lattice
    positions = material.positions
    numbers = material.numbers
    symbols = material.get_chemical_symbols()
    
    # Create bilayer by duplicating and shifting
    tau = stacking.tau
    d_interlayer = stacking.interlayer_distance
    
    # Layer 1 positions (original)
    layer1_positions = positions.copy()
    
    # Layer 2 positions (shifted by tau in fractional coords and d in z)
    layer2_positions = positions.copy()
    layer2_positions[:, 0] += tau[0]  # Shift in x (fractional)
    layer2_positions[:, 1] += tau[1]  # Shift in y (fractional)
    
    # Wrap fractional coordinates to [0, 1)
    layer2_positions[:, :2] = layer2_positions[:, :2] % 1.0
    
    # Convert interlayer distance to fractional z coordinate
    c_length = np.linalg.norm(lattice[2])
    z_shift_fractional = d_interlayer / c_length
    layer2_positions[:, 2] += z_shift_fractional
    
    # Combine both layers
    all_positions = np.vstack([layer1_positions, layer2_positions])
    all_symbols = symbols + symbols  # Duplicate symbols
    all_numbers = np.concatenate([numbers, numbers])
    
    # Adjust cell to accommodate bilayer
    new_lattice = lattice.copy()
    new_lattice[2] = lattice[2] + np.array([0, 0, d_interlayer])
    
    # Generate CIF content
    cif_content = f"""# Generated by SYMPOL2D
# Material: {material.formula} ({material.uid})
# Stacking: {stacking_name} - tau = [{stacking.tau[0]:.4f}, {stacking.tau[1]:.4f}]
# Interlayer distance: {d_interlayer:.3f} A
# Polarization direction: {stacking.polar_direction or 'non-polar'}
# Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

data_{material.formula}_{stacking_name}

_chemical_name_common     '{material.formula} {stacking_name} bilayer'
_cell_length_a            {np.linalg.norm(new_lattice[0]):.6f}
_cell_length_b            {np.linalg.norm(new_lattice[1]):.6f}
_cell_length_c            {np.linalg.norm(new_lattice[2]):.6f}
_cell_angle_alpha         {np.degrees(np.arccos(np.dot(new_lattice[1], new_lattice[2])/(np.linalg.norm(new_lattice[1])*np.linalg.norm(new_lattice[2])))):.4f}
_cell_angle_beta          {np.degrees(np.arccos(np.dot(new_lattice[0], new_lattice[2])/(np.linalg.norm(new_lattice[0])*np.linalg.norm(new_lattice[2])))):.4f}
_cell_angle_gamma         {np.degrees(np.arccos(np.dot(new_lattice[0], new_lattice[1])/(np.linalg.norm(new_lattice[0])*np.linalg.norm(new_lattice[1])))):.4f}

_symmetry_space_group_name_H-M    'P 1'
_symmetry_Int_Tables_number       1

loop_
_atom_site_label
_atom_site_type_symbol
_atom_site_fract_x
_atom_site_fract_y
_atom_site_fract_z
_atom_site_occupancy
"""
    
    # Add atoms
    for i, (symbol, pos) in enumerate(zip(all_symbols, all_positions)):
        layer_num = 1 if i < len(symbols) else 2
        atom_label = f"{symbol}{i+1}_L{layer_num}"
        cif_content += f"{atom_label:8s} {symbol:2s} {pos[0]:10.6f} {pos[1]:10.6f} {pos[2]:10.6f} 1.0\n"
    
    return cif_content


def save_all_stackings_cif(material: Material2D, stackings: Dict[str, StackingConfiguration],
                          output_dir: Path) -> List[Path]:
    """
    Save all stacking configurations as separate CIF files.
    
    Args:
        material: Material2D object
        stackings: Dictionary of stacking configurations
        output_dir: Directory to save CIF files
        
    Returns:
        List of paths to created CIF files
    """
    output_dir.mkdir(parents=True, exist_ok=True)
    created_files = []
    
    for name, config in stackings.items():
        # Generate CIF content
        cif_content = generate_bilayer_cif(material, config, name)
        
        # Create filename
        filename = f"{material.formula}_{name}.cif"
        filepath = output_dir / filename
        
        # Write CIF file
        with open(filepath, 'w') as f:
            f.write(cif_content)
        
        created_files.append(filepath)
    
    return created_files